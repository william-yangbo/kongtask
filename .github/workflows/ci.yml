name: CI (Open Source Optimized)

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

permissions:
  contents: read
  security-events: write
  actions: read

env:
  GO_VERSION: '1.23'

jobs:
  # 快速检查 - 最先运行，快速反馈语法错误
  quick-check:
    name: Quick Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Verify dependencies
        run: go mod verify

      - name: Check Go formatting
        run: |
          if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
            echo "The following files are not properly formatted:"
            gofmt -s -l .
            exit 1
          fi

      - name: Build
        run: go build -v ./...

      - name: Go vet
        run: go vet ./...

  # 代码质量检查 - 并行运行以加快反馈
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v8
        with:
          version: latest
          args: --timeout=10m

  # 核心测试 - 使用最新稳定版本
  test:
    name: Test (Go ${{ matrix.go-version }})
    runs-on: ubuntu-latest
    needs: quick-check # 只依赖快速检查，与lint并行

    strategy:
      matrix:
        go-version: ['1.22', '1.23'] # 支持两个版本确保兼容性

    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: kongtask_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}
          cache: true

      - name: Run tests with race detection
        run: go test -race -coverprofile=coverage-${{ matrix.go-version }}.out -covermode=atomic ./...
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: kongtask_test

      - name: Run integration tests
        run: go test -v ./test/integration/...
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: kongtask_test

      - name: Upload coverage to Codecov
        if: matrix.go-version == '1.23' # 只上传一次覆盖率报告
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage-${{ matrix.go-version }}.out
          flags: unittests
          name: codecov-umbrella

  # 兼容性测试 - 测试不同 PostgreSQL 版本
  compatibility:
    name: Compatibility (PostgreSQL ${{ matrix.postgres-version }})
    runs-on: ubuntu-latest
    needs: quick-check

    strategy:
      matrix:
        postgres-version: ['14', '15', '16']

    services:
      postgres:
        image: postgres:${{ matrix.postgres-version }}-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: kongtask_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Run core tests
        run: go test ./pkg/... ./internal/... # 只测试核心包，加快速度
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: kongtask_test

  # 性能测试 - 只在main分支运行，避免PR中的噪音
  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: [test, compatibility]

    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: kongtask_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Run performance tests
        run: go test -v ./perftest/... -timeout=15m
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: kongtask_test

      - name: Run benchmarks
        run: go test -bench=. -benchmem ./pkg/... -run=^$ -timeout=10m
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: kongtask_test

  # 安全扫描 - 只在main分支运行
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: quick-check

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: go

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: 'codeql'

      - name: Run Gosec Security Scanner
        run: |
          go install github.com/securecodewarrior/gosec/v2/cmd/gosec@latest
          gosec -fmt sarif -out results.sarif ./...

      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: results.sarif
          category: 'gosec'

  # 构建测试 - 确保在不同平台可以构建
  build:
    name: Build (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    needs: quick-check

    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Build
        run: go build -v ./...

      - name: Test build artifacts
        run: |
          go build -o kongtask-${{ matrix.os }} ./cmd/kongtask
        if: matrix.os != 'windows-latest'

      - name: Test build artifacts (Windows)
        run: |
          go build -o kongtask-${{ matrix.os }}.exe ./cmd/kongtask
        if: matrix.os == 'windows-latest'
